@page "/PatchCreate"
@using LitePatch.Services.Interfaces
@using LibGit2Sharp
@inject ISnackbar Snackbar
@inject IGitInfoService GitInfoService
@inject IGitPatchService GitPatchService

<MudPaper Elevation="2">
    <MudStack Class="p-2" Spacing="2">
        <MudText>Create Patches from commits by clicking the arrows next to the commit message.</MudText>
        <MudTable Items="@GitInfoService.CommitsOnBranch" Dense="true" Elevation="0">
            <HeaderContent>
                <MudTh>Commit Name</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="CommitName">@context.Message</MudTd>
                <MudTd DataLabel="Actions">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Outlined.DoubleArrow" @onclick="() => CreatePatch(context)"/>
                    </CellTemplate>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudStack>
</MudPaper>


@code {

    protected override void OnInitialized()
    {
        GitInfoService.InfoChanged += (_, _) => InvokeAsync(StateHasChanged);
    }

    private void CreatePatch(Commit commit)
    {
        var sha = commit.Sha;
        
        if (!GitPatchService.ExportPatch(sha, commit.Message))
        {
            Snackbar.Add("Patch could not be created", Severity.Error);
        }
        Snackbar.Add($"Patch created successfully", Severity.Success);
    }
    
}